/* Generated By:JavaCC: Do not edit this line. AnalizadorSintacticoTinyConstants.java */
package asint;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface AnalizadorSintacticoTinyConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int letra = 1;
  /** RegularExpression Id. */
  int digitoPositivo = 2;
  /** RegularExpression Id. */
  int digito = 3;
  /** RegularExpression Id. */
  int TRUE = 6;
  /** RegularExpression Id. */
  int FALSE = 7;
  /** RegularExpression Id. */
  int INT = 8;
  /** RegularExpression Id. */
  int BOOL = 9;
  /** RegularExpression Id. */
  int TYPE = 10;
  /** RegularExpression Id. */
  int VAR = 11;
  /** RegularExpression Id. */
  int WHILE = 12;
  /** RegularExpression Id. */
  int DO = 13;
  /** RegularExpression Id. */
  int PROC = 14;
  /** RegularExpression Id. */
  int CALL = 15;
  /** RegularExpression Id. */
  int WITH = 16;
  /** RegularExpression Id. */
  int NEW = 17;
  /** RegularExpression Id. */
  int DELETE = 18;
  /** RegularExpression Id. */
  int NULL = 19;
  /** RegularExpression Id. */
  int STRUCT = 20;
  /** RegularExpression Id. */
  int CASE = 21;
  /** RegularExpression Id. */
  int BREAK = 22;
  /** RegularExpression Id. */
  int DEFAULTtoken = 23;
  /** RegularExpression Id. */
  int READ = 24;
  /** RegularExpression Id. */
  int WRITE = 25;
  /** RegularExpression Id. */
  int CHAR = 26;
  /** RegularExpression Id. */
  int FLOAT = 27;
  /** RegularExpression Id. */
  int STRING = 28;
  /** RegularExpression Id. */
  int SWITCH = 29;
  /** RegularExpression Id. */
  int IF = 30;
  /** RegularExpression Id. */
  int THEN = 31;
  /** RegularExpression Id. */
  int ELSE = 32;
  /** RegularExpression Id. */
  int identificador = 33;
  /** RegularExpression Id. */
  int numeroEntero = 34;
  /** RegularExpression Id. */
  int cadena = 35;
  /** RegularExpression Id. */
  int parteDecimal = 36;
  /** RegularExpression Id. */
  int parteExponencial = 37;
  /** RegularExpression Id. */
  int numeroReal = 38;
  /** RegularExpression Id. */
  int CTECHAR = 39;
  /** RegularExpression Id. */
  int CTESTRING = 40;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "<letra>",
    "<digitoPositivo>",
    "<digito>",
    "<token of kind 4>",
    "<token of kind 5>",
    "<TRUE>",
    "<FALSE>",
    "<INT>",
    "<BOOL>",
    "<TYPE>",
    "<VAR>",
    "<WHILE>",
    "<DO>",
    "<PROC>",
    "<CALL>",
    "<WITH>",
    "<NEW>",
    "<DELETE>",
    "<NULL>",
    "<STRUCT>",
    "<CASE>",
    "<BREAK>",
    "<DEFAULTtoken>",
    "<READ>",
    "<WRITE>",
    "<CHAR>",
    "<FLOAT>",
    "<STRING>",
    "<SWITCH>",
    "<IF>",
    "<THEN>",
    "<ELSE>",
    "<identificador>",
    "<numeroEntero>",
    "<cadena>",
    "<parteDecimal>",
    "<parteExponencial>",
    "<numeroReal>",
    "<CTECHAR>",
    "<CTESTRING>",
    "\";\"",
    "\"(\"",
    "\")\"",
    "\",\"",
    "\"&\"",
    "\"*\"",
    "\"[\"",
    "\"]\"",
    "\"{\"",
    "\"}\"",
    "\"=\"",
    "\":\"",
    "\"==\"",
    "\"!=\"",
    "\"<=\"",
    "\"<\"",
    "\"=>\"",
    "\">\"",
    "\"||\"",
    "\"+\"",
    "\"-\"",
    "\"&&\"",
    "\"/\"",
    "\"%\"",
    "\"!\"",
    "\"_\"",
    "\".\"",
    "\"->\"",
    "\"[]\"",
  };

}
